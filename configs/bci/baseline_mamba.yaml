Comment: >
  # This trains the baseline model
  python run.py --config-name="baseline_mamba" trainer_cfg.fast_dev_run=1 model_cfg.configs.layer_dim=1

project_name: "speech_bci"
experiment_name: "baseline_mamba"

seed: 0

data_cfg:
  batchSize: 64
  num_workers: 0
  datasetPath: "${oc.env:DEEP_SSM_DATA}/SpeechBCI/competitionData/ptDecoder_ctc"
  train_split: 1    # % of training data assigned to train_loader 1=100%
  # transformations:
  whiteNoiseSD: 0.8
  constantOffsetSD: 0.2
  # masking
  mask_value: 0.0
  speckled_mask_p: 0 #0.45
  feature_mask_p: 0 #0.03
  temporal_mask_n: 0 #1
  temporal_mask_len: 0 #2
  renormalize_masking: false

module_cfg:
  type: "bci"

model_cfg:
  type: "bci_mamba"
  configs:
    neural_dim: 256 #nInputFeatures
    n_classes: 40 #nClasses
    # mamba params
    d_model: 1024
    d_state: 16
    d_conv: 4
    expand_factor: 1
    bidirectional: true
    layer_dim: 6 #nLayers
    # base decoder parameters:
    gaussianSmoothWidth: 2.0
    unfolding: true
    strideLen: 4
    kernelLen: 32
    input_nonlinearity: "softsign"
    normalize_batch: false
    init_embedding_layer: false
    include_relu: false
    dropout: 0
    

optimizer_cfg:
  type: "adam"
  configs:
    lr: 0.02 # lrStart
    betas: [0.9, 0.99]
    eps: 0.1
    weight_decay: 1e-5  #l2_decay

scheduler_cfg:
  type: "linear"
  interval: "step"
  frequency: 1
  configs:
    start_factor : 1.0
    end_factor: 1.0

callbacks:
  lr_monitor:
    logging_interval: "step"
  grad_norm:
    type:
  early_stopping:
    monitor: "ctc_loss_validation"
    min_delta: 1e-4
    patience: 10
    verbose: false
    mode: "min"

trainer_cfg:
  fast_dev_run: false
  logger: "wandb"
  accelerator: "auto"
  max_steps: 10000
  log_every_n_steps: 100
  gradient_clip_val: 0
  gradient_clip_algorithm: "norm"
  limit_test_batches:
  limit_train_batches:
  limit_val_batches:
  max_epochs:


eval_cfg:

hydra:
  run:
    dir: ./outputs/${now:%y-%m-%d}/${now:%H-%M-%S}